/*
Copyright (c) 2006 Beyhan Meyrali [C*]
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


/*
 * StartUp.java
 *
 * Created on 24 September 2006, 20:24
 */

package net.sourceforge.smsengine;

/**
 * This is the class which creates the form 
 */
import org.apache.log4j.Logger;

/**
 *
 * @author  Beyhan Meyrali 
 */
public class StartUp extends javax.swing.JFrame {
    
    private static final Logger log = Logger.getLogger(StartUp.class.getName());
    
    //Load Messages from database form
    private LoadMessagesFromDatabase loadMessagesFromDatabase = null;
    
    //Load Messages from database form
    private LoadReceiversFromDatabase loadReceiversFromDatabase = null;
    
    /** Creates new form StartUp */
    public StartUp() {
        
        initComponents();
        
        //Create the Load messages from database form
        loadMessagesFromDatabase = new LoadMessagesFromDatabase();        
        
        //Create the Load receivers from database form
        loadReceiversFromDatabase = new LoadReceiversFromDatabase();

        //PropertyConfigurator.configure("c:\\logs\\log4j.properties");//Will be deleted, after adding the property file to classpath
        log.debug("Application is starting !");
    	System.out.println("Copyright (c) 2006 Beyhan Meyrali [C*]");
    	System.out.println("SendSMS Console Application is starting ...");          
    	System.out.println("");
    	System.out.println("Please use -c argument to run in console mode .");    	
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jTabbedPaneMain = new javax.swing.JTabbedPane();
        jPanelMessage = new javax.swing.JPanel();
        jLabelEnterMsg = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaMessage = new javax.swing.JTextArea();
        jLabelLetterCount = new javax.swing.JLabel();
        jTextFieldLetterCount = new javax.swing.JTextField();
        jButtonSend = new javax.swing.JButton();
        jPanelReceiver = new javax.swing.JPanel();
        jLabelEnterRecievers = new javax.swing.JLabel();
        jLabelNumberOfRecievers = new javax.swing.JLabel();
        jTextFieldNumberOfRecievers = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaRecievers = new javax.swing.JTextArea();
        jPanelGSMModemSettings = new javax.swing.JPanel();
        jLabelPort = new javax.swing.JLabel();
        jTextFieldPort = new javax.swing.JTextField();
        jLabelBaudRate = new javax.swing.JLabel();
        jTextFieldBaudRate = new javax.swing.JTextField();
        jLabelPin = new javax.swing.JLabel();
        jTextFieldSimPin = new javax.swing.JTextField();
        jLabelSourcePort = new javax.swing.JLabel();
        jTextFieldSourcePort = new javax.swing.JTextField();
        jTextFieldDestPort = new javax.swing.JTextField();
        jLabelDestPort = new javax.swing.JLabel();
        jLabelSMSCenter = new javax.swing.JLabel();
        jTextFieldSMSC = new javax.swing.JTextField();
        jLabelNote = new javax.swing.JLabel();
        jLabelNote1 = new javax.swing.JLabel();
        jLabelNote2 = new javax.swing.JLabel();
        jLabelNote3 = new javax.swing.JLabel();
        jButtonSendDefaults = new javax.swing.JButton();
        jButtonSetSettingsFromFile = new javax.swing.JButton();
        jMenuBarMain = new javax.swing.JMenuBar();
        jMenuItems = new javax.swing.JMenu();
        jMenuItemLoadMesg = new javax.swing.JMenuItem();
        jMenuItemLoadMessageFromDatabase = new javax.swing.JMenuItem();
        jMenuItemSaveMsg = new javax.swing.JMenuItem();
        jMenuItemLoadReceivers = new javax.swing.JMenuItem();
        jMenuItemReceiversFromDatabase = new javax.swing.JMenuItem();
        jMenuItemSaveReceivers = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SMS to Everyone 0.1");
        setName("mainFrame");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jTabbedPaneMain.setBackground(new java.awt.Color(204, 204, 255));
        jTabbedPaneMain.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabelEnterMsg.setText("Enter Your Message :");

        jTextAreaMessage.setColumns(20);
        jTextAreaMessage.setFont(new java.awt.Font("Times New Roman", 1, 14));
        jTextAreaMessage.setRows(5);
        jTextAreaMessage.setAutoscrolls(false);
        jTextAreaMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                StartUp.this.keyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextAreaMessageKeyReleased(evt);
            }
        });
        jTextAreaMessage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextAreaMessageMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTextAreaMessage);

        jLabelLetterCount.setText("Letter Count :");

        jTextFieldLetterCount.setText("0");

        jButtonSend.setText(".::Send::.");
        jButtonSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSendMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelMessageLayout = new org.jdesktop.layout.GroupLayout(jPanelMessage);
        jPanelMessage.setLayout(jPanelMessageLayout);
        jPanelMessageLayout.setHorizontalGroup(
            jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelMessageLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabelEnterMsg)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelMessageLayout.createSequentialGroup()
                        .add(jLabelLetterCount)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextFieldLetterCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 99, Short.MAX_VALUE)
                        .add(jButtonSend, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelMessageLayout.setVerticalGroup(
            jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelMessageLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabelEnterMsg)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .add(16, 16, 16)
                .add(jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelLetterCount)
                    .add(jTextFieldLetterCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonSend))
                .addContainerGap())
        );
        jTabbedPaneMain.addTab("Message", jPanelMessage);

        jLabelEnterRecievers.setText("Enter Recievers :");

        jLabelNumberOfRecievers.setText("Number of Recievers");

        jTextFieldNumberOfRecievers.setText("0");

        jTextAreaRecievers.setColumns(20);
        jTextAreaRecievers.setFont(new java.awt.Font("Times New Roman", 1, 14));
        jTextAreaRecievers.setRows(5);
        jTextAreaRecievers.setAutoscrolls(false);
        jTextAreaRecievers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextAreaRecieverskeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextAreaRecieversKeyReleased(evt);
            }
        });

        jScrollPane2.setViewportView(jTextAreaRecievers);

        org.jdesktop.layout.GroupLayout jPanelReceiverLayout = new org.jdesktop.layout.GroupLayout(jPanelReceiver);
        jPanelReceiver.setLayout(jPanelReceiverLayout);
        jPanelReceiverLayout.setHorizontalGroup(
            jPanelReceiverLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelReceiverLayout.createSequentialGroup()
                .add(jPanelReceiverLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelReceiverLayout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE))
                    .add(jPanelReceiverLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabelEnterRecievers))
                    .add(jPanelReceiverLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabelNumberOfRecievers)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextFieldNumberOfRecievers, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelReceiverLayout.setVerticalGroup(
            jPanelReceiverLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelReceiverLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabelEnterRecievers)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .add(20, 20, 20)
                .add(jPanelReceiverLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelNumberOfRecievers)
                    .add(jTextFieldNumberOfRecievers, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jTabbedPaneMain.addTab("Receiver(s)", jPanelReceiver);

        jLabelPort.setText("Port Name");

        jLabelBaudRate.setText("Baud Rate");

        jLabelPin.setText("SIM PIN");

        jLabelSourcePort.setText("Source Port");

        jLabelDestPort.setText("Destination port");

        jLabelSMSCenter.setText("SMS Center Number");

        jLabelNote.setText("Note : You can get port and baud settings by checking ");

        jLabelNote1.setText("Control Panel / Fax/Modem and selecting your modem");

        jLabelNote2.setText("Note : You can check connection between your GSM Modem(Mobile)");

        jLabelNote3.setText(" and your computer by using Hyper Terminal");

        jButtonSendDefaults.setText("Set Default Settings");
        jButtonSendDefaults.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSendDefaultsMouseClicked(evt);
            }
        });

        jButtonSetSettingsFromFile.setText("Set Setting From Property File");
        jButtonSetSettingsFromFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSetSettingsFromFileMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelGSMModemSettingsLayout = new org.jdesktop.layout.GroupLayout(jPanelGSMModemSettings);
        jPanelGSMModemSettings.setLayout(jPanelGSMModemSettingsLayout);
        jPanelGSMModemSettingsLayout.setHorizontalGroup(
            jPanelGSMModemSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelGSMModemSettingsLayout.createSequentialGroup()
                .add(jPanelGSMModemSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanelGSMModemSettingsLayout.createSequentialGroup()
                        .add(41, 41, 41)
                        .add(jLabelNote1))
                    .add(jPanelGSMModemSettingsLayout.createSequentialGroup()
                        .add(41, 41, 41)
                        .add(jLabelNote3))
                    .add(jPanelGSMModemSettingsLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanelGSMModemSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jLabelNote2)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jLabelNote)))
                    .add(jPanelGSMModemSettingsLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanelGSMModemSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelGSMModemSettingsLayout.createSequentialGroup()
                                .add(jLabelDestPort)
                                .add(23, 23, 23)
                                .add(jTextFieldDestPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelGSMModemSettingsLayout.createSequentialGroup()
                                .add(jLabelPin)
                                .add(62, 62, 62)
                                .add(jTextFieldSimPin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelGSMModemSettingsLayout.createSequentialGroup()
                                .add(jPanelGSMModemSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabelPort)
                                    .add(jLabelBaudRate)
                                    .add(jLabelSourcePort))
                                .add(44, 44, 44)
                                .add(jPanelGSMModemSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldSourcePort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldBaudRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelGSMModemSettingsLayout.createSequentialGroup()
                                .add(jLabelSMSCenter)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jTextFieldSMSC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jPanelGSMModemSettingsLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jButtonSendDefaults)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonSetSettingsFromFile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelGSMModemSettingsLayout.setVerticalGroup(
            jPanelGSMModemSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelGSMModemSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelGSMModemSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelPort))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelGSMModemSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldBaudRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelBaudRate))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelGSMModemSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelPin)
                    .add(jTextFieldSimPin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelGSMModemSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldSourcePort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelSourcePort))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelGSMModemSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelDestPort)
                    .add(jTextFieldDestPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelGSMModemSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldSMSC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelSMSCenter))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelGSMModemSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonSendDefaults)
                    .add(jButtonSetSettingsFromFile))
                .add(4, 4, 4)
                .add(jLabelNote)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabelNote1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabelNote2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabelNote3)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jTabbedPaneMain.addTab("GSM Device Settings", jPanelGSMModemSettings);

        jMenuItems.setText("Menu");
        jMenuItemLoadMesg.setLabel("Load Message from a text file");
        jMenuItemLoadMesg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItemLoadMesgMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItemLoadMesgMouseReleased(evt);
            }
        });

        jMenuItems.add(jMenuItemLoadMesg);

        jMenuItemLoadMessageFromDatabase.setLabel("Load Message From Database");
        jMenuItemLoadMessageFromDatabase.addMenuDragMouseListener(new javax.swing.event.MenuDragMouseListener() {
            public void menuDragMouseDragged(javax.swing.event.MenuDragMouseEvent evt) {
            }
            public void menuDragMouseEntered(javax.swing.event.MenuDragMouseEvent evt) {
            }
            public void menuDragMouseExited(javax.swing.event.MenuDragMouseEvent evt) {
            }
            public void menuDragMouseReleased(javax.swing.event.MenuDragMouseEvent evt) {
                jMenuItemLoadMessageFromDatabaseMenuDragMouseReleased(evt);
            }
        });
        jMenuItemLoadMessageFromDatabase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItemLoadMessageFromDatabaseMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItemLoadMessageFromDatabaseMouseReleased(evt);
            }
        });

        jMenuItems.add(jMenuItemLoadMessageFromDatabase);

        jMenuItemSaveMsg.setLabel("Save Message to a text file");
        jMenuItemSaveMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveMsgActionPerformed(evt);
            }
        });
        jMenuItemSaveMsg.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
                jMenuItemSaveMsgMenuKeyReleased(evt);
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        jMenuItemSaveMsg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItemSaveMsgMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItemSaveMsgMouseReleased(evt);
            }
        });

        jMenuItems.add(jMenuItemSaveMsg);

        jMenuItemLoadReceivers.setLabel("Load Receivers from a text file");
        jMenuItemLoadReceivers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItemLoadReceiversMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItemLoadReceiversMouseReleased(evt);
            }
        });

        jMenuItems.add(jMenuItemLoadReceivers);

        jMenuItemReceiversFromDatabase.setText("Load Receivers From Database");
        jMenuItemReceiversFromDatabase.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
                jMenuItemReceiversFromDatabaseMenuKeyReleased(evt);
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        jMenuItemReceiversFromDatabase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItemReceiversFromDatabaseMouseReleased(evt);
            }
        });

        jMenuItems.add(jMenuItemReceiversFromDatabase);

        jMenuItemSaveReceivers.setLabel("Save Recivers to a text file");
        jMenuItemSaveReceivers.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
                jMenuItemSaveReceiversMenuKeyReleased(evt);
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        jMenuItemSaveReceivers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItemSaveReceiversMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItemSaveReceiversMouseReleased(evt);
            }
        });

        jMenuItems.add(jMenuItemSaveReceivers);
        jMenuItemSaveReceivers.getAccessibleContext().setAccessibleName("Save Receivers");

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItemExitMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItemExitMouseReleased(evt);
            }
        });

        jMenuItems.add(jMenuItemExit);

        jMenuBarMain.add(jMenuItems);

        setJMenuBar(jMenuBarMain);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPaneMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jTabbedPaneMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemReceiversFromDatabaseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemReceiversFromDatabaseMouseReleased
        // TODO add your handling code here:
        loadReceiversFromDatabase.setVisible(true);
    }//GEN-LAST:event_jMenuItemReceiversFromDatabaseMouseReleased

    private void jMenuItemReceiversFromDatabaseMenuKeyReleased(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_jMenuItemReceiversFromDatabaseMenuKeyReleased
        // TODO add your handling code here:        
    }//GEN-LAST:event_jMenuItemReceiversFromDatabaseMenuKeyReleased

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        if (loadMessagesFromDatabase.message.length()>0){
            String temp="";
            temp = jTextAreaMessage.getText();    
            jTextAreaMessage.setText(temp + loadMessagesFromDatabase.message);
            loadMessagesFromDatabase.message = "";
            getMessageLength();
        }
        if (loadReceiversFromDatabase.receivers.length()>0){
            String temp="";
            temp = jTextAreaRecievers.getText();    
            jTextAreaRecievers.setText(temp + loadReceiversFromDatabase.receivers);
            loadReceiversFromDatabase.receivers = "";
            getRecieversNumber();
        }        
    }//GEN-LAST:event_formWindowActivated

    private void jMenuItemLoadMessageFromDatabaseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemLoadMessageFromDatabaseMouseReleased
    // TODO add your handling code here:
        loadMessagesFromDatabase.setVisible(true);
    }//GEN-LAST:event_jMenuItemLoadMessageFromDatabaseMouseReleased

    private void jMenuItemLoadMessageFromDatabaseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemLoadMessageFromDatabaseMouseClicked
    // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemLoadMessageFromDatabaseMouseClicked

    private void jMenuItemLoadMessageFromDatabaseMenuDragMouseReleased(javax.swing.event.MenuDragMouseEvent evt) {//GEN-FIRST:event_jMenuItemLoadMessageFromDatabaseMenuDragMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemLoadMessageFromDatabaseMenuDragMouseReleased

    private void jButtonSetSettingsFromFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSetSettingsFromFileMouseClicked
        // TODO add your handling code here:
        loadGSMDeviceConnectionSettings();
    }//GEN-LAST:event_jButtonSetSettingsFromFileMouseClicked

    private void jMenuItemSaveReceiversMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemSaveReceiversMouseReleased
        // TODO add your handling code here:
	log.debug("exportReceivers() called ");
        exportReceivers();
    }//GEN-LAST:event_jMenuItemSaveReceiversMouseReleased

    private void jMenuItemSaveMsgMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemSaveMsgMouseReleased
        // TODO add your handling code here:
	log.debug("exportMessage() called ");
        exportMessage();		
    }//GEN-LAST:event_jMenuItemSaveMsgMouseReleased

    private void jMenuItemSaveMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveMsgActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemSaveMsgActionPerformed

    private void jMenuItemExitMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemExitMouseReleased
        // TODO add your handling code here:
	log.debug("Exit clicked ");
        int result = javax.swing.JOptionPane.showConfirmDialog(null, "Exit ?", "Exit ?", javax.swing.JOptionPane.YES_NO_OPTION);
        if(result == javax.swing.JOptionPane.YES_OPTION)
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitMouseReleased

    private void jMenuItemExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemExitMouseClicked
	log.debug("Exit clicked");
        int result = javax.swing.JOptionPane.showConfirmDialog(null, "Exit ?", "Exit ?", javax.swing.JOptionPane.YES_NO_OPTION);
        if(result == javax.swing.JOptionPane.YES_OPTION)
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitMouseClicked

    private void jMenuItemSaveReceiversMenuKeyReleased(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_jMenuItemSaveReceiversMenuKeyReleased
        // TODO add your handling code here:        
	log.debug("exportReceivers() called ");
        exportReceivers();
    }//GEN-LAST:event_jMenuItemSaveReceiversMenuKeyReleased

    private void jMenuItemLoadReceiversMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemLoadReceiversMouseReleased
        // TODO add your handling code here:
	log.debug("importReceivers() called ");
        importReceivers();
    }//GEN-LAST:event_jMenuItemLoadReceiversMouseReleased

    private void jMenuItemSaveMsgMenuKeyReleased(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_jMenuItemSaveMsgMenuKeyReleased
        // TODO add your handling code here:
	log.debug("exportMessage() called ");
        exportMessage();
    }//GEN-LAST:event_jMenuItemSaveMsgMenuKeyReleased

    private void jMenuItemLoadMesgMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemLoadMesgMouseReleased
        // TODO add your handling code here:
	log.debug("importMessage() called ");
        importMessage();               
    }//GEN-LAST:event_jMenuItemLoadMesgMouseReleased

    private void jTextAreaMessageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaMessageMouseClicked
        // TODO add your handling code here:        
    }//GEN-LAST:event_jTextAreaMessageMouseClicked

    private void jMenuItemSaveReceiversMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemSaveReceiversMouseClicked
        // TODO add your handling code here:
	log.debug("exportReceivers() called ");
        exportReceivers();
    }//GEN-LAST:event_jMenuItemSaveReceiversMouseClicked

    private void jMenuItemLoadReceiversMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemLoadReceiversMouseClicked
        // TODO add your handling code here:
	log.debug("importReceivers() called ");
        importReceivers();
    }//GEN-LAST:event_jMenuItemLoadReceiversMouseClicked

    private void jMenuItemSaveMsgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemSaveMsgMouseClicked
        // TODO add your handling code here:
	log.debug("exportMessage() called ");
        exportMessage();
    }//GEN-LAST:event_jMenuItemSaveMsgMouseClicked

    private void jMenuItemLoadMesgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemLoadMesgMouseClicked
        // TODO add your handling code here:
	log.debug("importMessage() called ");
        importMessage();
    }//GEN-LAST:event_jMenuItemLoadMesgMouseClicked
    
    /*
     *set default gsm device connection settings values 
     */
    private void jButtonSendDefaultsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSendDefaultsMouseClicked
        // TODO add your handling code here:
	log.debug("Setting default gsm device connection settings  ");
        jTextFieldPort.setText("COM5");
        jTextFieldBaudRate.setText("9600");
        jTextFieldSourcePort.setText("0");
        jTextFieldDestPort.setText("50001");
        jTextFieldSimPin.setText("0000");
        jTextFieldSMSC.setText("");
	log.debug("COM5, 9600, 0, 50001, 0000, ");
    }//GEN-LAST:event_jButtonSendDefaultsMouseClicked
   
    /**
     *Try to send the sms :)
     *But first check if everything is ok
     *@return boolean
     */
    private boolean sendSMS(){
        log.debug("Trying to send sms....");
        SendSMS sendSMS = new SendSMS();
        
        //Check the Message length
        log.debug("Checking the length of SMS text , it needs to be at least 1 character");
        if(jTextAreaMessage.getText().length()<1){
            javax.swing.JOptionPane.showMessageDialog(null,"Message length can not be less than 1 character !");
	    log.debug("There is no text to send");
            return false;
        }else{
	    log.debug("Setting text message as SMS text");
            sendSMS.setSMSMessage(jTextAreaMessage.getText());
        }        
        
        //Check the number of recievers
        log.debug("Checking the number of recievers , it needs to be at least 1 reciever");
        if(jTextAreaRecievers.getText().length()<5){
            javax.swing.JOptionPane.showMessageDialog(null,"You dont have any reciever :) !");
	    log.debug("There is no reciever !");
            return false;
        }

        //Check the port name
        log.debug("Checking the PC connection port name (can be as COM4 ...)");
        if(jTextFieldPort.getText().length()<1){
            javax.swing.JOptionPane.showMessageDialog(null,"You need to enter the port name, ex : COM4 ");
	    log.debug("There is no port name");
            return false;
        }else{
	    log.debug("Setting the PC connection port name ");
            sendSMS.setPort(jTextFieldPort.getText());
        }

        //Check the baud Rate
        log.debug("Checking the GSM Device Baud rate ");
        if(jTextFieldBaudRate.getText().length()<1){
            javax.swing.JOptionPane.showMessageDialog(null,"You need to enter the Baud Rate, ex : 9600 ");
	    log.debug("There is no baudRate");
            return false;
        }else{
	    log.debug("Setting the GSM Device Baud rate ");
            sendSMS.setBaudRate(jTextFieldBaudRate.getText());
        }

        //Check the sourcePort
        log.debug("Cheking the source port ");
        if(jTextFieldSourcePort.getText().length()<1){
            javax.swing.JOptionPane.showMessageDialog(null,"You need to enter the source port, ex : 0 ");
	    log.debug("There is no source port ");
            return false;
        }else{
            log.debug("Setting the source port ");
            sendSMS.setSourcePort(jTextFieldSourcePort.getText());
        }

        //Check the destination port
        log.debug("Cheking the destination port ");
        if(jTextFieldDestPort.getText().length()<1){
            javax.swing.JOptionPane.showMessageDialog(null,"You need to enter the destination port, ex : 50001 ");
	    log.debug("There is no destination port ");
            return false;
        }else{
            log.debug("Setting the destination port ");
            sendSMS.setDestinationPort(jTextFieldDestPort.getText());
        }

        //Check the sim pin
        log.debug("Cheking the Sim Pin ");
        if(jTextFieldSimPin.getText().length()>0){
            log.debug("Setting the sim pin ");
            sendSMS.setSimPin(jTextFieldSimPin.getText());
        }        

        //Check the sms center number
        log.debug("Cheking the sms center number ");
        if(jTextFieldSMSC.getText().length()>0){
	    log.debug("Setting the sms center number ");
            sendSMS.setSMSCenterNumber(jTextFieldSMSC.getText());
        }        
        
        String allText = jTextAreaRecievers.getText() ;            
        java.util.StringTokenizer st = new java.util.StringTokenizer(allText,"\n") ;
        log.debug("Getting reciever list ");
        log.debug("Trying to connect to device ");
        if(sendSMS.connectToDevice()){        
	    log.debug("Connected to device :)");
            while (st.hasMoreTokens()) {                                                      
                String num =st.nextToken().trim();                    
                num = num.replace(" ","");                    
                num = num.replace("-","");                    
                num = num.replace(")","");                    
                num = num.replace("(","");

                if(num.length()>0){                                 
                    try{
                        sendSMS.setDestinationNumber(num);
                        log.debug("Setting reciever number ");
                        if(!sendSMS.sendSMS()){
                            log.debug("Could not send sms to " + num);
                            log.debug("Reseting the phone connection ");
                            sendSMS.resetConnection();
                        }
                    }catch(Exception e){
				        log.debug("Could not send sms to " + num);
				        log.debug("Reseting the phone connection "+ e.getMessage());
                        sendSMS.resetConnection();
                    }
                }   
            }    
		    log.debug("Sending SMS completed ");
		    log.debug("Trying to disconnect from device ");
            sendSMS.disconnectFromDevice();
            return true; 
        }else{
	    log.debug("Could not conneted to Device !!! ");
            javax.swing.JOptionPane.showMessageDialog(null,"Sending SMS failed");
            return false; 
        }    
    }
    
    private void jButtonSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSendMouseClicked
        // TODO add your handling code here:
        jTextAreaRecievers.append("\n");
        if(sendSMS()){
            javax.swing.JOptionPane.showMessageDialog(null,"Sending SMS has been completed");
        }   
    }//GEN-LAST:event_jButtonSendMouseClicked

    private void jTextAreaRecieversKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaRecieversKeyReleased
        // TODO add your handling code here:
        jTextAreaRecieverskeyPressed(evt);
    }//GEN-LAST:event_jTextAreaRecieversKeyReleased

    private void jTextAreaMessageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaMessageKeyReleased
        keyPressed(evt);
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextAreaMessageKeyReleased

    private void jTextAreaRecieverskeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaRecieverskeyPressed
// TODO add your handling code here:
         getRecieversNumber();
    }//GEN-LAST:event_jTextAreaRecieverskeyPressed

    private void keyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyPressed
        // TODO add your handling code here:
        getMessageLength();
    }//GEN-LAST:event_keyPressed
    

    /*
     *Sets the jTextFieldNumberOfRecievers text as the number of the recievers
     */
    private void getRecieversNumber(){
        jTextFieldNumberOfRecievers.setText(Integer.toString(jTextAreaRecievers.getLineCount()));
    }
    
    
    /*
     *Sets the jTextFieldLetterCount text as the length of the text message
     */
    private void getMessageLength(){
        jTextFieldLetterCount.setText(Integer.toString(jTextAreaMessage.getText().length()));
    }
    
    /*
     *Read the message from a file
     *@return boolean
     */
    public boolean importMessage(){
        try{
            javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
            int res = fc.showOpenDialog(this);

            if(res == fc.APPROVE_OPTION){
                java.io.File file = fc.getSelectedFile();                        
                java.io.FileReader reader = new java.io.FileReader(file);					
                java.io.BufferedReader br = new java.io.BufferedReader(reader);					
                jTextAreaMessage.read( br, null );					
                br.close();					
                jTextAreaMessage.requestFocus();
                getMessageLength();
                log.debug("Imported the message from a file ");
                return true;
            }else{
	        log.debug("Failed to import the message from a file ");
                System.out.println("importMessage() : File selecting cancelled !");
                return false;
            }
        }catch(Exception e){
	    log.debug("Failed to import the message from a file "+e.getMessage());
            System.out.println("Could not read the file !");
            javax.swing.JOptionPane.showMessageDialog(null,"Could not read the file !");
            return false;
        }
    }

    /*
     *Get recievers from an ArrayList
     *@return boolean
     */
    public static boolean importReceivers(java.util.ArrayList list){
        //Code will be here
        return true;   
    }
    /*
     *Get recievers from a file
     *@return boolean
     */
    public boolean importReceivers(){
        try{
            javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
            int res = fc.showOpenDialog(this);

            if(res == fc.APPROVE_OPTION){
                java.io.File file = fc.getSelectedFile();                        
                java.io.FileReader reader = new java.io.FileReader(file);					
                java.io.BufferedReader br = new java.io.BufferedReader(reader);					
                jTextAreaRecievers.read( br, null );					
                br.close();			
                jTextAreaRecievers.requestFocus();
                getRecieversNumber();
                log.debug("Imported the recievers from a file ");
                return true;
            }else{
                log.debug("Failed to import the recievers from a file ");
                System.out.println("importReceivers() : File selecting cancelled !");
                return false;
            }
        }catch(Exception e){
	    log.debug("Failed to import the recievers from a file "+e.getMessage());
            System.out.println("Could not read the file !");
            javax.swing.JOptionPane.showMessageDialog(null,"Could not read the file !");
            return false;
        }
    }

    /*
     *Write the message to a file
     *@return boolean
     */
    public boolean exportMessage(){
        try{
            javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
            int res = fc.showSaveDialog(this);

            if(res == fc.APPROVE_OPTION){
                java.io.File file = fc.getSelectedFile();                        
                java.io.FileWriter writer = new java.io.FileWriter(file);					
                java.io.BufferedWriter bw = new java.io.BufferedWriter( writer );
                jTextAreaMessage.write( bw );
                bw.close();	
                jTextAreaMessage.requestFocus();
                getMessageLength();
	        log.debug("Message written to a file");
                return true;
            }else{
                log.debug("Failed to write message to a file");
                System.out.println("exportMessage() : File select cancelled !");
                return false;
            }
        }catch(Exception e){
	    log.debug("Failed to write message to a file"+e.getMessage());
            System.out.println("Could not write the file !");
            javax.swing.JOptionPane.showMessageDialog(null,"Could not write the file !");
            return false;
        }        
    }

    /*
     *Write the Recievers to a file 
     *@return boolean
     */
    public boolean exportReceivers(){        
        try{
            javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
            int res = fc.showSaveDialog(this);

            if(res == fc.APPROVE_OPTION){
                java.io.File file = fc.getSelectedFile();                        
                java.io.FileWriter writer = new java.io.FileWriter(file);					
                java.io.BufferedWriter bw = new java.io.BufferedWriter( writer );
                jTextAreaRecievers.write( bw );
                bw.close();	
                jTextAreaRecievers.requestFocus();
                getMessageLength();

                return true;
            }else{
	        log.debug("Failed to write recievers list to a file");
                System.out.println("exportRecievers() : File selecting cancelled !");
                return false;
            }
        }catch(Exception e){
	    log.debug("Failed to write recievers list to a file "+e.getMessage());
            System.out.println("Could not write the file !");
            javax.swing.JOptionPane.showMessageDialog(null,"Could not write the file !");
            return false;
        }              
    }
    
    /* 
     * Load GSM Device Connection Settings from a property file.
     *@return boolean
     */
    public boolean loadGSMDeviceConnectionSettings(){ 
        String gsmDeviceConnectionSettings = "/gsmDeviceConnectionSettings.properties"; 
        java.io.InputStream sis = this.getClass().getResourceAsStream(gsmDeviceConnectionSettings); 

        if ( sis == null ) { 
            log.debug(gsmDeviceConnectionSettings+" file does not exist"); 
            System.out.println(gsmDeviceConnectionSettings+" file does not exist");
            // Doesn't exist 
            return false; 
        }

        // Load props 
        java.util.Properties sourceProp = new java.util.Properties(); 

        if ( sourceProp != null ){
            try{ 
                sourceProp.load(sis);
                log.debug("Setting default gsm device connection settings  ");
                jTextFieldPort.setText(sourceProp.getProperty("port").trim());
                jTextFieldBaudRate.setText(sourceProp.getProperty("baudRate").trim());
                jTextFieldSourcePort.setText(sourceProp.getProperty("sourcePort").trim());
                jTextFieldDestPort.setText(sourceProp.getProperty("destinationPort").trim());
                jTextFieldSimPin.setText(sourceProp.getProperty("pin").trim());
                jTextFieldSMSC.setText(sourceProp.getProperty("smsCNum").trim());	                                 

                log.debug(" Port :" + sourceProp.getProperty("port").trim()); 
                log.debug(" BaudRate :" + sourceProp.getProperty("baudRate").trim()); 
                log.debug(" Sim Pin :" + sourceProp.getProperty("pin").trim()); 
                log.debug(" Sms Service Center Number :" + sourceProp.getProperty("smsCNum").trim()); 
                log.debug(" Source Port :" + sourceProp.getProperty("sourcePort").trim()); 
                log.debug(" Destination Port :" + sourceProp.getProperty("destinationPort").trim()); 

                return true; 
            }catch(Exception e){ 
                log.debug(gsmDeviceConnectionSettings+" file does not exist"); 
                return false; 
            }
        }
        return true; 
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    	boolean consoleMode = false;
        for (String s: args) {
        	if((s.equalsIgnoreCase("-C"))||(s.equalsIgnoreCase("-c"))){
        		consoleMode = true;
        	}
        }
        
        if(consoleMode){
        	SMSConsole.main(args);
        }else{        	
            try { 
                javax.swing.UIManager.setLookAndFeel("net.sourceforge.napkinlaf.NapkinLookAndFeel");
                log.debug("Setting Napkin Look and Feel");
            } catch (Exception ex) { 
                log.debug("Failed to set look and feel "+ex.getMessage());
                ex.printStackTrace(); 
            } 

            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                	log.debug("Running...");
                    StartUp startUp = new StartUp();
                    startUp.setVisible(true);
                    startUp.loadGSMDeviceConnectionSettings();
                }
            });

        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSend;
    private javax.swing.JButton jButtonSendDefaults;
    private javax.swing.JButton jButtonSetSettingsFromFile;
    private javax.swing.JLabel jLabelBaudRate;
    private javax.swing.JLabel jLabelDestPort;
    private javax.swing.JLabel jLabelEnterMsg;
    private javax.swing.JLabel jLabelEnterRecievers;
    private javax.swing.JLabel jLabelLetterCount;
    private javax.swing.JLabel jLabelNote;
    private javax.swing.JLabel jLabelNote1;
    private javax.swing.JLabel jLabelNote2;
    private javax.swing.JLabel jLabelNote3;
    private javax.swing.JLabel jLabelNumberOfRecievers;
    private javax.swing.JLabel jLabelPin;
    private javax.swing.JLabel jLabelPort;
    private javax.swing.JLabel jLabelSMSCenter;
    private javax.swing.JLabel jLabelSourcePort;
    private javax.swing.JMenuBar jMenuBarMain;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemLoadMesg;
    private javax.swing.JMenuItem jMenuItemLoadMessageFromDatabase;
    private javax.swing.JMenuItem jMenuItemLoadReceivers;
    private javax.swing.JMenuItem jMenuItemReceiversFromDatabase;
    private javax.swing.JMenuItem jMenuItemSaveMsg;
    private javax.swing.JMenuItem jMenuItemSaveReceivers;
    private javax.swing.JMenu jMenuItems;
    private javax.swing.JPanel jPanelGSMModemSettings;
    private javax.swing.JPanel jPanelMessage;
    private javax.swing.JPanel jPanelReceiver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPaneMain;
    private javax.swing.JTextArea jTextAreaMessage;
    private javax.swing.JTextArea jTextAreaRecievers;
    private javax.swing.JTextField jTextFieldBaudRate;
    private javax.swing.JTextField jTextFieldDestPort;
    private javax.swing.JTextField jTextFieldLetterCount;
    private javax.swing.JTextField jTextFieldNumberOfRecievers;
    private javax.swing.JTextField jTextFieldPort;
    private javax.swing.JTextField jTextFieldSMSC;
    private javax.swing.JTextField jTextFieldSimPin;
    private javax.swing.JTextField jTextFieldSourcePort;
    // End of variables declaration//GEN-END:variables
    
}
