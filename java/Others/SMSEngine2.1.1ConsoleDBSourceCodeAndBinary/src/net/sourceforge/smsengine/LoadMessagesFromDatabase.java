/*
Copyright (c) 2006 Beyhan Meyrali [C*]
All rights reserved.
/**
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
package net.sourceforge.smsengine;

import org.apache.log4j.Logger;
/**
 *
 * @author  beyhan
 */
public class LoadMessagesFromDatabase extends javax.swing.JFrame {

    private static final Logger log = Logger.getLogger(StartUp.class.getName());    
    
    /** Settings for Database Connection to Load messages*/ 
    private String mDatabaseType ="";
    private String mDatabaseServerName ="";
    private String mDBPort ="";
    private String mUserName ="";
    private String mPassword ="";
    private String mTnsNameOrDBName ="";
    private String mTableName ="";
    private String mColumnName ="";
    private String mQuery ="";    
    
    public  String message ="";
    
    /** Creates new form LoadMessagesFromDatabase */
    public LoadMessagesFromDatabase() {
        try { 
            javax.swing.UIManager.setLookAndFeel("net.sourceforge.napkinlaf.NapkinLookAndFeel");
            log.debug("Setting Napkin Look and Feel");
        } catch (Exception ex) { 
            log.debug("Failed to set look and feel "+ex.getMessage());
            ex.printStackTrace(); 
        } 
        initComponents();
        //Load datab
        loadDatabaseSettingsForMessages();
        setFieldValues();
        System.out.println("Load Database settings for Messages");
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanelMessage = new javax.swing.JPanel();
        jLabelDatabaseNameIP = new javax.swing.JLabel();
        jTextFieldDatabaseNameIp = new javax.swing.JTextField();
        jLabelSchemaTNSName = new javax.swing.JLabel();
        jTextFieldSchemaTNSName = new javax.swing.JTextField();
        jLabelDBPort = new javax.swing.JLabel();
        jTextFieldDBPort = new javax.swing.JTextField();
        jLabelUserName = new javax.swing.JLabel();
        jTextFieldUserName = new javax.swing.JTextField();
        jLabelPassword = new javax.swing.JLabel();
        jTextFieldPassword = new javax.swing.JTextField();
        jLabelTableName = new javax.swing.JLabel();
        jTextFieldTableName = new javax.swing.JTextField();
        jLabelTableName1 = new javax.swing.JLabel();
        jTextFieldColumnName = new javax.swing.JTextField();
        jTextFieldSQLQuery = new javax.swing.JTextField();
        jLabelSQLQuery = new javax.swing.JLabel();
        jButtonLoadSettingsFromPropertyFile = new javax.swing.JButton();
        jButtonSQLExecute = new javax.swing.JButton();
        jLabelDatabaseType = new javax.swing.JLabel();
        jComboBoxDatabaseType = new javax.swing.JComboBox();

        setTitle("Load Message From Database");
        jPanelMessage.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanelMessage.setName("Load Message From Database");
        jLabelDatabaseNameIP.setText("Database Name / IP ");

        jLabelSchemaTNSName.setText("TNS / Schema Name ");

        jLabelDBPort.setText("Database Port ");

        jLabelUserName.setText("User Name");

        jLabelPassword.setText("Password");

        jLabelTableName.setText("Table Name");

        jLabelTableName1.setText("Column Name");

        jLabelSQLQuery.setText("SQL Query");

        jButtonLoadSettingsFromPropertyFile.setText("Load Settings From Property File");
        jButtonLoadSettingsFromPropertyFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonLoadSettingsFromPropertyFileMouseClicked(evt);
            }
        });

        jButtonSQLExecute.setFont(new java.awt.Font("Tahoma", 1, 11));
        jButtonSQLExecute.setForeground(new java.awt.Color(0, 204, 0));
        jButtonSQLExecute.setText("Connect to Database and Get Data");
        jButtonSQLExecute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSQLExecuteMouseClicked(evt);
            }
        });

        jLabelDatabaseType.setText("Database Type ");

        jComboBoxDatabaseType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Oracle", "MySQL" }));

        org.jdesktop.layout.GroupLayout jPanelMessageLayout = new org.jdesktop.layout.GroupLayout(jPanelMessage);
        jPanelMessage.setLayout(jPanelMessageLayout);
        jPanelMessageLayout.setHorizontalGroup(
            jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelMessageLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelMessageLayout.createSequentialGroup()
                        .add(jButtonLoadSettingsFromPropertyFile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(jPanelMessageLayout.createSequentialGroup()
                        .add(47, 47, 47)
                        .add(jButtonSQLExecute, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(58, 58, 58))
                    .add(jPanelMessageLayout.createSequentialGroup()
                        .add(jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabelUserName)
                            .add(jLabelDBPort)
                            .add(jLabelSchemaTNSName)
                            .add(jLabelDatabaseNameIP)
                            .add(jLabelPassword)
                            .add(jLabelTableName)
                            .add(jLabelTableName1)
                            .add(jLabelSQLQuery)
                            .add(jLabelDatabaseType))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jTextFieldSchemaTNSName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                            .add(jTextFieldDBPort, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                            .add(jTextFieldUserName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                            .add(jTextFieldDatabaseNameIp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                            .add(jTextFieldPassword, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                            .add(jTextFieldTableName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                            .add(jTextFieldSQLQuery, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextFieldColumnName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                            .add(jComboBoxDatabaseType, 0, 229, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanelMessageLayout.setVerticalGroup(
            jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelMessageLayout.createSequentialGroup()
                .add(8, 8, 8)
                .add(jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelDatabaseType)
                    .add(jComboBoxDatabaseType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelDatabaseNameIP)
                    .add(jTextFieldDatabaseNameIp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldSchemaTNSName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelSchemaTNSName))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldDBPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelDBPort))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldUserName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelUserName))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelPassword))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldTableName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelTableName))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelTableName1)
                    .add(jTextFieldColumnName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelMessageLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldSQLQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelSQLQuery))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonLoadSettingsFromPropertyFile)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonSQLExecute)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelMessage, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelMessage, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoadSettingsFromPropertyFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonLoadSettingsFromPropertyFileMouseClicked
    // TODO add your handling code here:
        loadDatabaseSettingsForMessages();
        setFieldValues();
        System.out.println("Load Database settings for Messages");
    }//GEN-LAST:event_jButtonLoadSettingsFromPropertyFileMouseClicked

    private void jButtonSQLExecuteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSQLExecuteMouseClicked
        // TODO add your handling code here:
        if(loadMessagesFromDatabase()){
            this.setVisible(false);        
            javax.swing.JOptionPane.showMessageDialog(null,"Loading message from database completed");
        }else{
            javax.swing.JOptionPane.showMessageDialog(null,"Loading message from database failed. Please check log file");
        }
    }//GEN-LAST:event_jButtonSQLExecuteMouseClicked

    /* 
     * Load Database Connection Settings from a property file for messages.
     * @return boolean
     */
    public boolean loadDatabaseSettingsForMessages(){ 
        log.debug("trying to load database connection settings for message from property file");
        String databaseConnectionSettings = "/databaseConnectionSettings.properties"; 
        java.io.InputStream sis = this.getClass().getResourceAsStream(databaseConnectionSettings); 

        if ( sis == null ) { 
            log.debug(databaseConnectionSettings+" file does not exist"); 
            System.out.println(databaseConnectionSettings+" file does not exist");
            // Doesn't exist 
            return false; 
        }

        // Load props 
        java.util.Properties sourceProp = new java.util.Properties(); 
        
        try{ 
            sourceProp.load(sis);
            if ( sourceProp != null ){
                log.debug("Setting default database connection settings for messages from property file");
                mDatabaseType =sourceProp.getProperty("mDatabaseType").trim();
                mDatabaseServerName =sourceProp.getProperty("mDatabaseServerName").trim();
                mDBPort =sourceProp.getProperty("mDBPort").trim();
                mUserName =sourceProp.getProperty("mUserName").trim();
                mPassword =sourceProp.getProperty("mPassword").trim();
                mTnsNameOrDBName =sourceProp.getProperty("mTnsNameOrDBName").trim();
                mTableName =sourceProp.getProperty("mTableName").trim();
                mColumnName =sourceProp.getProperty("mColumnName").trim();
                mQuery =sourceProp.getProperty("mQuery").trim();

                log.debug("Database Type : " + mDatabaseType); 
                log.debug("Database Server Name / IP : " + mDatabaseServerName);
                log.debug("Database Server Connection Port : " +mDBPort);
                log.debug("Database User Name : "+mUserName);
                log.debug("Database Password : " + mPassword);
                log.debug("Database Name / TNS Name : " +mTnsNameOrDBName);
                log.debug("Table Name : " +mTableName);
                log.debug("Column Name : " + mColumnName);
                log.debug("SQL Query to run : "+ mQuery);
                
                return true;
    	}else{
            log.debug(databaseConnectionSettings+" file does not exist");
            System.out.println(databaseConnectionSettings+" file does not exist");
            javax.swing.JOptionPane.showMessageDialog(null,databaseConnectionSettings+" file does not exist");
    	    return false;
    	}
            
        }catch(Exception e){ 
            log.debug(databaseConnectionSettings+" file does not exist or missing parameters in file");
            System.out.println(databaseConnectionSettings+" file does not exist or missing parameters in file");
            javax.swing.JOptionPane.showMessageDialog(null,databaseConnectionSettings+" file does not exist or missing parameters in file");
            return false; 
        } 
    }

    /* 
     * Load Database Connection Settings from a property file for messages.
     * @return boolean
     */
     private void setFieldValues(){        

         if(mDatabaseType.equalsIgnoreCase("mysql")){
            jComboBoxDatabaseType.setSelectedIndex(1);
         }
         if(mDatabaseType.equalsIgnoreCase("oracle")){
            jComboBoxDatabaseType.setSelectedIndex(0);
         }
         jTextFieldDatabaseNameIp.setText(mDatabaseServerName);
         jTextFieldDBPort.setText(mDBPort);
         jTextFieldSchemaTNSName.setText(mTnsNameOrDBName);
         jTextFieldUserName.setText(mUserName);
         jTextFieldPassword.setText(mPassword);
         jTextFieldTableName.setText(mTableName);
         jTextFieldColumnName.setText(mColumnName);
         jTextFieldSQLQuery.setText(mQuery);        
     }

     /* 
      * Load Database Connection Settings from a Form fields
      */
      private void getConnectionParams(){        

          mDatabaseType = ((String)jComboBoxDatabaseType.getSelectedItem());
          mDatabaseServerName = jTextFieldDatabaseNameIp.getText();
          mDBPort = jTextFieldDBPort.getText();
          mTnsNameOrDBName = jTextFieldSchemaTNSName.getText();
          mUserName = jTextFieldUserName.getText();
          mPassword = jTextFieldPassword.getText();
          mTableName = jTextFieldTableName.getText();
          mColumnName = jTextFieldColumnName.getText();
          mQuery = jTextFieldSQLQuery.getText();
          
          log.debug("Setting Database connection parameters by using form field values");
          log.debug(mDatabaseType+"\n");
          log.debug(mDatabaseServerName+"\n");
          log.debug(mDBPort+"\n");
          log.debug(mTnsNameOrDBName+"\n");
          log.debug(mUserName+"\n");
          log.debug(mPassword+"\n");
          log.debug(mQuery+"\n");
          
      }

	/**
	 * Load message from a Database table or view
	 * @param fileName takes the file name with path
	 * @return boolean
	 */
	public boolean loadMessagesFromDatabase(){
        log.debug("trying to load message from database");            
		try{	
			getConnectionParams();
			if((mDatabaseType != null)&& (mDatabaseType.length()>0)
            		&&(mDatabaseServerName != null)&& (mDatabaseServerName.length()>0)
            		&&(mUserName != null)&& (mUserName.length()>0)
            		&&(mPassword != null)&& (mPassword.length()>0)
            		&&(mTnsNameOrDBName != null)&& (mTnsNameOrDBName.length()>0)
            		&&((mQuery != null)&& (mQuery.length()>0)||((mTableName != null)&& (mTableName.length()>0)&&(mColumnName != null)&& (mColumnName.length()>0)))){
				
				java.util.ArrayList dbData = new java.util.ArrayList();
            	
				if (mDatabaseType.equalsIgnoreCase("oracle")){
                	DBConnectionToOracle dbCon = new DBConnectionToOracle();
                	
                	dbCon.setDBNameOrIP(mDatabaseServerName);
                	dbCon.setDBPort(mDBPort);
                	dbCon.setDBUserName(mUserName);
                	dbCon.setDBPassword(mPassword);
                	dbCon.setDBTNSName(mTnsNameOrDBName);
                	dbCon.setExternalSQLStatement(mQuery);
                	dbCon.setTableName(mTableName);
                	dbCon.setColumnName(mColumnName);
                	
                	dbData = dbCon.getData();
                }else if (mDatabaseType.equalsIgnoreCase("mysql")){                	
                	DBConnectionToMySQL dbCon = new DBConnectionToMySQL();

                	dbCon.setDBNameOrIP(mDatabaseServerName);
                	dbCon.setDBPort(mDBPort);
                	dbCon.setDBUserName(mUserName);
                	dbCon.setDBPassword(mPassword);
                	dbCon.setDBName(mTnsNameOrDBName);
                	dbCon.setExternalSQLStatement(mQuery);
                	dbCon.setTableName(mTableName);
                	dbCon.setColumnName(mColumnName);
                	
                	dbData = dbCon.getData();                	
                }else{
                	log.debug("Unknown Database Type (You can connect to Oracle or MySQL DBs.");
                	System.out.println("Unknown Database Type (You can connect to Oracle or MySQL DBs.");
                        //javax.swing.JOptionPane.showMessageDialog(null,"Unknown Database Type (You can connect to Oracle or MySQL DBs.");
                	return false;
                }
                
                for(int i = 0;i<dbData.size();i++)
                	message = message + ((String)dbData.get(i))+"\n";               
                					
                if(setMessage(message)){
                	log.debug("Imported the message from database ");
                	System.out.println("Imported the message from database ");
                	return true;
                }else{
                	return false;                	
                }
            }else{
	        log.debug("insufficient parameters, please check the parameters ");
                System.out.println("insufficient parameters, please check the parameters ");
                //javax.swing.JOptionPane.showMessageDialog(null,"insufficient parameters, please check the parameters ");
                return false;
            }
			
        }catch(Exception e){
	    log.debug("Failed to import the message from database "+e.getMessage());
            System.out.println("Failed to import the message from database "+e.getMessage());
            //javax.swing.JOptionPane.showMessageDialog(null,"Failed to import the message from database "+e.getMessage());
            return false;
        }		
        }
        
    /*
     * setMessage
     * @param message
     * @return boolean
     */
    public boolean setMessage(String message){
    	if(message.trim().length()>0){
    		this.message=message;
    		System.out.println("Message is ready ...");
    		log.debug("Your message added from database");
    		return true;
    	}else{
    		log.debug("There is no text to add !"+ message);
    		System.out.println("There is no text to add !"+ message);
    		return false;
    	}
    }

        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
            try { 
                javax.swing.UIManager.setLookAndFeel("net.sourceforge.napkinlaf.NapkinLookAndFeel");
                log.debug("Setting Napkin Look and Feel");
            } catch (Exception ex) { 
                log.debug("Failed to set look and feel "+ex.getMessage());
                ex.printStackTrace(); 
            } 

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoadMessagesFromDatabase().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLoadSettingsFromPropertyFile;
    private javax.swing.JButton jButtonSQLExecute;
    private javax.swing.JComboBox jComboBoxDatabaseType;
    private javax.swing.JLabel jLabelDBPort;
    private javax.swing.JLabel jLabelDatabaseNameIP;
    private javax.swing.JLabel jLabelDatabaseType;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JLabel jLabelSQLQuery;
    private javax.swing.JLabel jLabelSchemaTNSName;
    private javax.swing.JLabel jLabelTableName;
    private javax.swing.JLabel jLabelTableName1;
    private javax.swing.JLabel jLabelUserName;
    private javax.swing.JPanel jPanelMessage;
    private javax.swing.JTextField jTextFieldColumnName;
    private javax.swing.JTextField jTextFieldDBPort;
    private javax.swing.JTextField jTextFieldDatabaseNameIp;
    private javax.swing.JTextField jTextFieldPassword;
    private javax.swing.JTextField jTextFieldSQLQuery;
    private javax.swing.JTextField jTextFieldSchemaTNSName;
    private javax.swing.JTextField jTextFieldTableName;
    private javax.swing.JTextField jTextFieldUserName;
    // End of variables declaration//GEN-END:variables
    
}
